<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://leonwong0609.github.io</id>
    <title>Wonder Space 🚀</title>
    <updated>2022-02-14T16:22:32.053Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://leonwong0609.github.io"/>
    <link rel="self" href="https://leonwong0609.github.io/atom.xml"/>
    <subtitle>不可勝在己，可勝在敵</subtitle>
    <logo>https://leonwong0609.github.io/images/avatar.png</logo>
    <icon>https://leonwong0609.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Wonder Space 🚀</rights>
    <entry>
        <title type="html"><![CDATA[好久不见]]></title>
        <id>https://leonwong0609.github.io/post/been-a-while/</id>
        <link href="https://leonwong0609.github.io/post/been-a-while/">
        </link>
        <updated>2022-02-14T16:12:43.000Z</updated>
        <summary type="html"><![CDATA[<p>各位好，好久不见。上次更新小站已经是一年多以前了，虽然这么久没再在博客敲字了，但我内心没有放弃的意思。我在这里写的东西不多，但总感觉像这样写写东西已经成了我生活的一部分，这一年来每每有些新奇的想法，做出了一些有意思的东西，我都有一种在这里写下来的冲动。</p>
]]></summary>
        <content type="html"><![CDATA[<p>各位好，好久不见。上次更新小站已经是一年多以前了，虽然这么久没再在博客敲字了，但我内心没有放弃的意思。我在这里写的东西不多，但总感觉像这样写写东西已经成了我生活的一部分，这一年来每每有些新奇的想法，做出了一些有意思的东西，我都有一种在这里写下来的冲动。</p>
<!-- more -->
<p>可惜的是去年自己真的心理健康状态堪忧，生活作息一塌糊涂，靠着身边的朋友的拉扯才勉勉强强度过一天又一天。现在想想那段时间，真觉得暗无天日，或许哪天心血来潮，也可以写一写这段经历。</p>
<p>可以想象，对于连下床都觉得动力不足的我来说，即使我再热爱，坚持写博客也还是太困难了，我内心一次次质疑我生活当中一切的意义，想到自己在折腾、写博客上花的时间别人都花在学习上，更觉得急躁不安。然而我一边这样想，一边却完全没有花更多的时间在「我应该做的」事情上，相反，我陷入这种一边觉得自己不务正业，一边也不去真正做「正业」的困境里，到最后的结果就是什么也没做。</p>
<p>过年后，从江苏回到广州，还有一段假期，两篇论文没写，但是毫无看文献动脑子的动力。今天上午，双一流评选结果公布后，我校更是不负众望成功落选，消息一出，朋友圈一篇哀鸿遍野。我也没忍住我的情绪，发了一条长朋友圈吐槽了一下，出乎意料的是收到了一些有段时间没联系的朋友的安慰，看来大家都在经历成长的阵痛吧。大家给的建议归纳起来都比较类似，就是停止责备自己，放下过去的选择，抓住还可以控制的当下。当然，对我来说大家安慰的内容已经不重要了，知道自己没那么糟糕，还有很多人在乎关心，内心波动的情绪也慢慢稳定下来了。</p>
<p>坐在电脑前面，我就想着管他呢，反正有时间，与其什么都不做，为什么不放下对自己的责备，做一些自己觉得酷的事情呢。于是我就打开电脑，没多思考就开始敲字了。暂停的一年也给了我思考的机会，虽然说这个博客完全是因为兴趣而起，但多少有点表演的成分，我在技术方面是个外行，但是又觉得聊技术的东西很酷，遇到问题时要是搜到了一些技术文章我也会觉得作者很厉害。所以我写东西的时候都尽量想用满各种 Markdown 语法，让页面看起来十分炫酷，然而内容现在看看却有的幼稚，有的强拼硬凑，为了写而写，为了酷酷的外观而写。我觉得这样没什么意思，所以我打算让我的博客能成为我的一小块自留地，我纯粹为了自己的快乐而写，写一切我觉得有趣的东西，即使他们不酷。我可以写我看到的一张好看的照片，我可以写看到的好看的电视剧电影，也可以像现在这样，在脑海中和可能看到这里的你们（其实也是和自己）聊聊天。</p>
<p>总之，我想我的博客成为我真正的爱好，而不是一种负担。写博客的本身已经让我快乐，然后我将让我快乐的事情分享出来，如果能帮助到哪怕一个人，那我的快乐便也更有意义了。所以，谢谢看到这里的每个你，正是你们的存在，让我这个看起来有点可笑的爱好有了除了满足我自己外的其他意义。</p>
<p>2022 年，希望我能捡起这个爱好，也希望我能从这里开始，想起生活本身的美好，然后更加勇敢地去面对未来的挑战。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 Dark Reader 为博客添加深色主题]]></title>
        <id>https://leonwong0609.github.io/post/dark-theme/</id>
        <link href="https://leonwong0609.github.io/post/dark-theme/">
        </link>
        <updated>2021-01-21T12:24:31.000Z</updated>
        <summary type="html"><![CDATA[<p>这两天又心血来潮了，想给博客增加深色主题，因为技术的限制，不可能自己重写一套，因此想着尝试使用一键生成深色主题的脚本，尝试了几次之后选择了 Dark Reader（是的就是那个浏览器扩展插件），记录一下。</p>
]]></summary>
        <content type="html"><![CDATA[<p>这两天又心血来潮了，想给博客增加深色主题，因为技术的限制，不可能自己重写一套，因此想着尝试使用一键生成深色主题的脚本，尝试了几次之后选择了 Dark Reader（是的就是那个浏览器扩展插件），记录一下。</p>
<!-- more -->
<hr>
<h2 id="一些碎碎念">一些碎碎念</h2>
<p>可能是小时候看科幻片的影响，我一直很喜欢黑色背景上面闪烁着亮色文字的交互界面。初中刚毕业有自己的手机之后，就给手机刷上了 CyanogenMod，然后把能搜到的深色主题一个个尝试。当时用的三星 Galaxy S6，OLED 屏幕下全黑色像素不发光的特性只让我觉得深色界面更酷了，完全不在乎烧屏这回事。我记得当时很多 CM 主题都包括了对国外常用软件的界面修改（Instagram 之类的），而对于国内的应用就没什么办法。所以当时还用 Xposed 框架上的一个模块来修改微信的界面，再替换微信的聊天背景，才能让微信的对话界面达到相对统一的暗色。</p>
<p>后来到高中以后，我的手机又换成了家人「退役」的 iPhone，玩手机的时间也大大减少，更关键的是手里的 iPhone 前面板是白色的，一段时间内就都没有特意追求过深色界面了。然而后来 iPhone 也换用了 OLED 屏幕，iOS 13 更是直接加上了系统级的深色模式界面，在 iOS 的号召力下，众多国内应用也开始适配深色模式了。前段时间微信也终于增加了深色模式，又是一个「有生之年」的事件实现了。</p>
<p>至于桌面端，微软在前段时间的某个版本也加入了深色模式，主要使用的一些软件也基本都有深色模式的适配（除了 Evernote）。至于浏览器，自从发现了 Dark Reader 这个插件之后，就从来没有换过，插件自动优化的效果也很好，我也就基本上也实现了桌面端深色界面的覆盖。</p>
<p>除了使用插件之外，越来越多的网站也适配了深色模式，我常用的一些网站包括少数派、GitHub 之类的也陆陆续续从我的 Dark Reader 名单里排除了。然而受制于水平，我自己的博客却从来没适配上深色模式。虽然说 Walker 这个主题的白色已经足够简洁优雅，但是我一直觉得如果能加上深色模式的话，虽然没什么用，但是会很酷。这个理由对我来说足够了。</p>
<p>说干就干，我觉得既然 Dark Reader 能对每个网站都能实现效果相对比较好的深色模式适配，那么网上一定有人造了自动生成网页深色模式的轮子，可以的话我拿来用就好。</p>
<hr>
<h2 id="darkmodejs">Darkmode.Js</h2>
<p>做了一些搜索之后，我最先发现的是一个叫 Darkmode.Js 的项目，在 <a href="https://darkmodejs.learn.uno/">官网</a> 就能预览这个脚本的效果，一个小按钮会漂浮在网页右下角，点击一次之后还会有平滑的过渡动画，网页嵌在了下面，只要点击右下角的图标就可以看到效果。</p>
<p>
<div style="width:100%;height:500px;overflow:hidden;border:0px">
<div style="width:100%;height:500px;margin: 0px 0px 0px 0px;">
<iframe src="https://darkmodejs.learn.uno/" style="width: 100%;margin: 0;padding: 0;border: 0;height:500px;" scrolling="yes">
</iframe>
</div>
</div>
</p>
<p><small>👆 Darkmode.Js 的官网，点击右下角的 🌓 图标可以切换网页主题</small></p>
<p>适配到自己网站也特别简单只要按照教程 include 到自己的网页就可以了。然而试了一下之后效果并不满意，这个实现的效果有点像静态反色，对于已经设定了背景色的元素会选择直接不做修改。因为网站的主题代码我自己修改过，可能有些地方不太规范，所以这个脚本不能实现很好的效果，我当时也没想到要写这篇博文，也就没有截图。</p>
<h2 id="dark-reader">Dark Reader</h2>
<p>之前说过 Walker 这个主题颜色比较简单，因此在开启 Dark Reader 插件的时候，自动生成的深色模式效果一直很好。我就在想，既然 Dark Reader 是开源的，会不会有人做过能利用 Dark Reader 的代码直接生成网页深色模式的脚本呢。于是我去 Dark Reader 的开源仓库上一看，开发者给出了在自己的网站使用 Dark Reader 的 <a href="https://github.com/darkreader/darkreader#using-for-a-website">方式</a>。</p>
<p>我们只需要通过 jsDelivr 来把脚本 include 到自己的网页中，就可以使用开发者提供的 API 了。我在网页中使用了根据设备系统设置自动选择是否启用深色模式，那么就在 <code>head.ejs</code> 添加以下内容：</p>
<pre><code class="language-html">&lt;!-- dark reader --&gt;
&lt;script src=&quot;https://cdn.jsdelivr.net/npm/darkreader@4.9.26/darkreader.min.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
    // Enable when system color scheme is dark.
    DarkReader.auto({
        brightness: 105,
        contrast: 95,
        sepia: 0,
        grayscale: 15
    });
&lt;/script&gt;
</code></pre>
<p>但是我还是希望可以增加一个可以自由选择颜色主题的选项，无奈一方面水平不够，另一方面也不想打破网站原有的设计，所以找了 sidebar 里 footer 的位置，RSS 链接的旁边加入了两个按钮：</p>
<pre><code class="language-html">&lt;div class=&quot;site-footer&quot;&gt;
    &lt;div class=&quot;py-4 text-gray-700&quot;&gt;&lt;%- themeConfig.footerInfo %&gt;&lt;/div&gt;
    &lt;a class=&quot;rss&quot; href=&quot;&lt;%= themeConfig.domain %&gt;/atom.xml&quot; target=&quot;_blank&quot; style=&quot;margin: 5px;&quot;&gt;RSS&lt;/a&gt;
    &lt;button onclick=&quot;DarkReader.disable()&quot; style=&quot;margin: 5px;&quot;&gt;🌖&lt;/button&gt;
    &lt;button onclick=&quot;DarkReader.enable({brightness: 105, contrast: 95, sepia: 0, grayscale: 15})&quot; style=&quot;margin: 5px;&quot;&gt;🌒&lt;/button&gt;
&lt;/div&gt;
</code></pre>
<p>最后的实现效果如图，点击亮的月亮就是切换成亮色模式，暗的月亮就是深色模式。</p>
<figure data-type="image" tabindex="1"><img src="https://leonwong0609.github.io/post-images/1611325163678.png" alt="" width="500" loading="lazy"></figure>
<p>直接点开左上角的菜单栏就可以直接试试效果啦！</p>
<h2 id="其他碎碎念">其他碎碎念</h2>
<p>总体来说使用现有的脚本来添加网页的深色模式比我原来想象的简单很多，尤其是使用 Dark Reader 之后，一些我自己乱加的毛玻璃效果都能得到很好的适配。或许在这些各种强大工具的加持下，以后将创意实现的难度会越来越低，这样看来，未来各种设计类工作中技术作为竞争力的重要程度也许会越来越低，真正重要的可能就只有创意了。</p>
<h2 id="补充">补充</h2>
<p>使用 Dark Reader 为博客成功添加深色主题后，内心还有一点小遗憾。我个人偏好 0 饱和度的深色模式，也就是不希望在深色中加入偏色。但是 Dark Reader 可能是处于护眼的考虑，默认的背景色和文字颜色都有少许的偏黄。以前使用插件时也一直存在这个遗憾，但是最近的一次更新让 Dark Reader 能够指定主题的背景色和文字颜色。</p>
<p>打开的方式也很简单，只需点击打开插件后点击右下角的 <code>Dev tools</code> ，</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/LeonWong0609/LeonPicbed/master/20210704004807.png" alt="插件设置" loading="lazy"></figure>
<p>在弹出来的窗口中点击右下角的 <code>Preview new design</code>，</p>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/LeonWong0609/LeonPicbed/master/20210704005008.png" alt="预览新界面" width="500" loading="lazy"></figure>
<p>完成后再点击插件图标，看到的就会是新的界面了。</p>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/LeonWong0609/LeonPicbed/master/20210704005452.png" alt="插件新界面" loading="lazy"></figure>
<p>这时就可以通过设置指定背景颜色和文字颜色，甚至可以指定是否要更改滚动条和选取文字的背景颜色。</p>
<p>这就启发了我思考 Dark Reader 提供的脚本能不能指定背景颜色和文字颜色，当时想着有空就做，结果一不小心鸽了大半年。正好今天背书背到自闭，无聊翻 GitHub 的时候突然想到这件事，于是就去看了一眼他们的 <a href="https://cdn.jsdelivr.net/npm/darkreader@latest/darkreader.js">脚本内容</a>，简单搜索了一下就发现了这一段</p>
<pre><code class="language-js">var themeCacheKeys = [
    'mode',
    'brightness',
    'contrast',
    'grayscale',
    'sepia',
    'darkSchemeBackgroundColor',
    'darkSchemeTextColor',
    'lightSchemeBackgroundColor',
    'lightSchemeTextColor',
];
</code></pre>
<p>于是我就把 <code>head.ejs</code> 里添加的内容改成了这样</p>
<pre><code class="language-html">&lt;!-- dark reader --&gt;
&lt;script src=&quot;https://cdn.jsdelivr.net/npm/darkreader@4.9.26/darkreader.min.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
    // Enable when system color scheme is dark.
    DarkReader.auto({
        darkSchemeBackgroundColor: '#121212',
        darkSchemeTextColor: '#ffffff'
    });
&lt;/script&gt;
</code></pre>
<p>重试了一下竟然就成功了，现在再用深色模式看这个网页，背景和文字终于是舒服的灰色，而不会偏黄了。</p>
<p>本来到这里打算合电脑睡觉了，结果发现上面 side bar 里的两个中启动深色模式的那个按钮还是指定的原来的颜色，一点就又回到了偏黄的颜色了。于是把第二个按钮也改了一下：</p>
<pre><code class="language-html">&lt;button onclick=&quot;DarkReader.enable({darkSchemeBackgroundColor:'#121212',darkSchemeTextColor:'#ffffff'})&quot; style=&quot;margin: 5px;&quot;&gt;🌒&lt;/button&gt;
</code></pre>
<p>这样颜色终于就没问题了。但是还是存在改动了主题之后刷新一下页面又回到默认主题的情况，我猜如果要解决这个问题可能就要把指定的主题写到 cookie 里面了吧，远远超出我的能力范围，就有缘再做吧。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[让博客在社交媒体的预览效果更丰富：OG 协议]]></title>
        <id>https://leonwong0609.github.io/post/add-open-graph-to-my-blog/</id>
        <link href="https://leonwong0609.github.io/post/add-open-graph-to-my-blog/">
        </link>
        <updated>2021-01-14T10:25:59.000Z</updated>
        <summary type="html"><![CDATA[<p>今天心血来潮对小站进行了一些调整，主要是使用了 OG 协议让博客在社交媒体上有更丰富的链接预览。</p>
]]></summary>
        <content type="html"><![CDATA[<p>今天心血来潮对小站进行了一些调整，主要是使用了 OG 协议让博客在社交媒体上有更丰富的链接预览。</p>
<!-- more -->
<p>前几天在看 Telegram 的时候，看到了 <a href="https://t.me/appinnfeed">小众软件的频道</a> 发了一篇 <a href="https://fliqlo.com/#/screensaver">Fliqlo</a> 近期升级了的 <a href="https://t.me/appinnfeed/3350">消息</a>。Fliqlo 我自己一直在用，前几天 Adobe 正式关闭了 Flash 之后，Fliqlo 也无法正常显示了，于是我干脆就卸载了它。结果晚上就看到了升级的消息，赶忙又装了回来。而让我动了折腾博客的念头的，是他们频道的消息样式。他们永远都是只发送一条网站的链接，但是链接预览的内容却非常丰富：</p>
<figure data-type="image" tabindex="1"><img src="https://leonwong0609.github.io/post-images/1610628900435.png" alt="" width="500" loading="lazy"></figure>
<p>不仅是小众软件，少数派的 Telegram 频道也有这样的效果：</p>
<figure data-type="image" tabindex="2"><img src="https://leonwong0609.github.io/post-images/1610628910214.png" alt="" width="500" loading="lazy"></figure>
<p>而我的博客链接发在 Telegram 中时却只能显示站点名称和一行站点描述：</p>
<figure data-type="image" tabindex="3"><img src="https://leonwong0609.github.io/post-images/1610628919171.png" alt="" width="500" loading="lazy"></figure>
<p>这个问题我在写关于 Telegram Instant View 的 <a href="/post/add-instant-view-to-my-blog">那篇博文</a> 的时候就有留意到，但是当时实现了 Instant View 之后就忘记了这件事。既然今天想起了这件事，择日不如撞日，说干就干。</p>
<p>我的需求就是优化自己的网站中 Telegram 链接预览的丰富程度，简单的搜索后很轻易地就找到了一些讨论的帖子，里面都提到了要在 <code>&lt;meta&gt;</code> 元素中加入 Open Graph。于是我就又开始搜索 Open Graph 相关的内容，经历了一下午的折腾和碰壁，终于实现了想要的效果，以下记录其中的过程。</p>
<h2 id="the-open-graph-protocol-是什么">The Open Graph protocol 是什么</h2>
<p>根据 The Open Graph protocol <a href="https://ogp.me/">官方页面</a> 的介绍，它能让网页在社交媒体中作为 Rich Object 存在。</p>
<blockquote>
<p>The Open Graph protocol enables any web page to become a rich object in a social graph. For instance, this is used on Facebook to allow any web page to have the same functionality as any other object on Facebook.<br>
— <a href="https://ogp.me/#intro">The Open Graph protocol / Introduction</a></p>
</blockquote>
<p>按照我的理解，也就是说使用 OG 协议来告诉社交媒体这个网页的标题、类型、摘要、题图等信息分别是什么，然后由社交媒体进行展示。</p>
<p>OG 协议写在 HTML 文件头部的 <code>&lt;meta&gt;</code> 标签中，按照官方说明，有四个属性是必备的，摘录如下：</p>
<ul>
<li><code>og:title</code> - The title of your object as it should appear within the graph, e.g., &quot;The Rock&quot;.</li>
<li><code>og:type</code> - The <a href="#types">type</a> of your object, e.g., &quot;video.movie&quot;. Depending on the type you specify, other properties may also be required.</li>
<li><code>og:image</code> - An image URL which should represent your object within the graph.</li>
<li><code>og:url</code> - The canonical URL of your object that will be used as its permanent ID in the graph, e.g., &quot;https://www.imdb.com/title/tt0117500/&quot;.</li>
</ul>
<p>同时 OG 官网也给了一个 IMDb 的网页作为例子，也摘录如下：</p>
<pre><code class="language-html">&lt;html prefix=&quot;og: https://ogp.me/ns#&quot;&gt;
&lt;head&gt;
&lt;title&gt;The Rock (1996)&lt;/title&gt;
&lt;meta property=&quot;og:title&quot; content=&quot;The Rock&quot; /&gt;
&lt;meta property=&quot;og:type&quot; content=&quot;video.movie&quot; /&gt;
&lt;meta property=&quot;og:url&quot; content=&quot;https://www.imdb.com/title/tt0117500/&quot; /&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;https://ia.media-imdb.com/images/rock.jpg&quot; /&gt;
...
&lt;/head&gt;
...
&lt;/html&gt;
</code></pre>
<p>当然，OG 协议还有很多其他可选的属性，官方页面说明也很详尽，这里不赘述。</p>
<h2 id="动手修改">动手修改</h2>
<p>了解这些后，就可以上手修改主题中的模板文件了。最开始我直接在通用的头部文件 <code>head.ejs</code> 中引入 OG 协议，但这样发现首页和文章页无法兼顾，因此我选择在首页文件 <code>index.ejs</code> 和文章页文件 <code>post.ejs</code> 中分别加入不同的 OG 标签。</p>
<h3 id="首页-indexejs">首页 <code>index.ejs</code></h3>
<p>博客的首页我希望在社交媒体中能显示博客名称、简介、地址以及头像，因此做如下修改：</p>
<pre><code class="language-html">&lt;html&gt;
    &lt;head&gt;
        &lt;%- include('./includes/head', { siteTitle: themeConfig.siteName }) %&gt;
        &lt;!-- OG --&gt; 
        &lt;meta property=&quot;og:locale&quot; content=&quot;zh_CN&quot;&gt;
        &lt;meta property=&quot;og:title&quot; content=&quot;&lt;%= themeConfig.siteName %&gt;&quot; /&gt;
        &lt;meta property=&quot;og:type&quot; content=&quot;blog&quot; /&gt;
        &lt;meta property=&quot;og:description&quot; content=&quot;&lt;%= themeConfig.siteDescription %&gt;&quot;&gt;
        &lt;meta property=&quot;og:url&quot; content=&quot;https://leonwong0609.github.io/&quot; /&gt;
        &lt;meta property=&quot;og:site_name&quot; content=&quot;&lt;%= themeConfig.siteName %&gt;&quot;&gt;
        &lt;meta property=&quot;og:image&quot; content=&quot;&lt;%= themeConfig.domain %&gt;/images/avatar.png?v=&lt;%= site.utils.now %&gt;&quot; /&gt;
        &lt;meta property=&quot;og:image:secure_url&quot; content=&quot;&lt;%= themeConfig.domain %&gt;/images/avatar.png?v=&lt;%= site.utils.now %&gt;&quot;&gt;
        &lt;meta property=&quot;og:image:height&quot; content=&quot;300&quot; /&gt;
        &lt;meta property=&quot;og:image:alt&quot; content=&quot;&lt;%= themeConfig.siteName %&gt;&quot;&gt;
</code></pre>
<p>这里 <code>content</code> 的引号内用 <code>&lt;%=</code> 和 <code>%&gt;</code> 标签夹住的就是 EJS 中输出的动态内容，这里是个坑，刚设置好主页的时候还没发现，后面到设置文章页的时候折腾了很久。</p>
<h3 id="文章页-postejs">文章页 <code>post.ejs</code></h3>
<p>文章页也就是每一篇博文的页面，是我主要想展示的内容，因此我希望能展示文章的标题、<strong>文章的</strong>简介（而不是网站的简介）、文章的链接，以及每篇公开文章我都会设置的题图。于是按照需求，我又用和上面一样的方法做了修改，然而中间遇到了很多问题，这里先把最终结果展示出来，问题慢慢讲：</p>
<pre><code class="language-html">&lt;html&gt;
    &lt;head&gt;
        &lt;%- include('./includes/head', { siteTitle: `${post.title} | ${themeConfig.siteName}` }) %&gt;
        &lt;meta name=&quot;description&quot; content=&quot;&lt;%= post.description %&gt;&quot; /&gt;
        &lt;!-- OG --&gt; 
        &lt;meta property=&quot;og:locale&quot; content=&quot;zh_CN&quot;&gt;
        &lt;meta property=&quot;og:title&quot; content=&quot;&lt;%= post.title %&gt;&quot; /&gt;
        &lt;meta property=&quot;og:type&quot; content=&quot;article&quot; /&gt;
        &lt;meta property=&quot;og:description&quot; content=&quot;&lt;%= post.description %&gt;&quot;&gt;
        &lt;meta property=&quot;og:url&quot; content=&quot;&lt;%= post.link %&gt;&quot; /&gt;
        &lt;meta property=&quot;og:site_name&quot; content=&quot;&lt;%= themeConfig.siteName %&gt;&quot;&gt;
        &lt;meta property=&quot;og:updated_time&quot; content=&quot;&lt;%= post.dateFormat %&gt;&quot;&gt;
        &lt;meta property=&quot;og:image&quot; content=&quot;&lt;%= post.feature %&gt;&quot; /&gt;
        &lt;meta property=&quot;og:image:secure_url&quot; content=&quot;&lt;%= post.feature %&gt;&quot;&gt;
        &lt;meta property=&quot;og:image:alt&quot; content=&quot;&lt;%= post.title %&gt;&quot;&gt;
</code></pre>
<h2 id="遇到的问题">遇到的问题</h2>
<p>首先是上方 <code>post.ejs</code> 文件中 <code>og:description</code> 这一行，按照我的理解，此处内容对应的应该就是链接预览中标题下方的简介内容，当时我最先想到的就是可以直接用 <code>post-list.ejs</code> 中标题下的 <code>post.abstract</code>，也就是文章摘要。于是我就将 <code>post-list.ejs</code> 文件中的代码直接拷贝过来，把这一行写成了：</p>
<pre><code class="language-html">&lt;meta property=&quot;og:description&quot; content=&quot;&lt;%- post.abstract %&gt;&quot;&gt;
</code></pre>
<p>然而当我预览时却出现了很多奇奇怪怪的问题，这样写主要错误在于没有分清 <code>&lt;%-</code> 和 <code>&lt;%=</code> 的不同效果，在 <code>post-list.ejs</code> 中，写法是这样的：</p>
<pre><code class="language-html">&lt;div class=&quot;content&quot;&gt;
    &lt;a href=&quot;&lt;%= post.link %&gt;&quot;&gt;
        &lt;h2 class=&quot;post-title text-xl font-extrabold mt-5 md:mt-0&quot;&gt;&lt;%= post.title %&gt;&lt;/h2&gt;
    &lt;/a&gt;
&lt;div class=&quot;post-abstract text-gray-700 font-light my-4&quot;&gt;
    &lt;%- post.abstract %&gt;
&lt;/div&gt;
</code></pre>
<p>可以看到上面倒数第二行 <code>&lt;%- post.abstract %&gt;</code> 直接代表了这个作为摘要的 div 中的 HTML 内容，换言之，使用 <code>&lt;%-</code> 输出的就是 HTML 内容，因此我在上面头部文件的 OG 标签中让它直接输出了 HTML 内容是不合适的。相对应的，<code>&lt;%=</code> 输出的内容是将指定的内容视为纯文本，因此查看源码可以发现输出的内容中如果含有 HTML 标签，是会直接被转义的。于是我暂时将这一行改成了：</p>
<pre><code class="language-html">&lt;meta property=&quot;og:description&quot; content=&quot;&lt;%= post.abstract %&gt;&quot;&gt;
</code></pre>
<p>但即使这样写，实际上还是存在问题，因为 <code>post.abstract</code> 是一段带有 HTML 标记的文本，因此在社交媒体的预览中仍然能看到被保留下来的 HTML 标签，十分影响观感：</p>
<figure data-type="image" tabindex="4"><img src="https://leonwong0609.github.io/post-images/1610629068978.png" alt="" width="500" loading="lazy"></figure>
<p>因此我就折腾了很久想找办法使 <code>post.abstract</code> 输出的内容转换为纯文本，就当我准备开始折腾用正则的时候，我不久前发的求助消息得到了回应，@eryouhao 大佬说可以换用 <code>post.description</code>，并且附上了 Gridea 的 <a href="https://gridea.dev/theme-structure/#post">主题目录结构与页面变量文档</a>。其中对 <code>post.abstract</code> 和 <code>post.description</code> 的描述分别为：</p>
<pre><code class="language-js">post: {
    content: '&lt;p&gt;&lt;strong&gt;Gridea&lt;/strong&gt; 一个静态博客写作客户端 &lt;!-- more --&gt;&lt;/p&gt;\n&lt;p&gt;👏 欢迎使用 &lt;strong&gt;Gridea&lt;/strong&gt; ！  &lt;/p&gt;\n&lt;p&gt;🌈 &lt;strong&gt;Gridea&lt;/strong&gt; 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ... &lt;/p&gt;',
    abstract: '&lt;p&gt;&lt;strong&gt;Gridea&lt;/strong&gt; 一个静态博客写作客户端 &lt;/p&gt;\n',
    description: '一个静态博客写作客户端 欢迎使用 Gridea！Gridea 一个静态博客写作客户端。你可以用它来记录你的生...', // 智能截取文章开始内容填充此字段，可用作未设置摘要时备用字段
}
</code></pre>
<p>由此可见，<code>post.description</code> 正好是不带标签的纯文本，完美满足我目前的需求。因此最终将这一行改为：</p>
<pre><code class="language-html">&lt;meta property=&quot;og:description&quot; content=&quot;&lt;%= post.description %&gt;&quot;&gt;
</code></pre>
<p>试验了之后果然符合要求，以后动手前一定要先看文档。</p>
<p>做出以上的修改后，博客文章在 Telegram 中的预览终于变成了想象中的样子：</p>
<figure data-type="image" tabindex="5"><img src="https://leonwong0609.github.io/post-images/1610629153978.png" alt="" width="500" loading="lazy"></figure>
<h2 id="twitter-cards">Twitter Cards</h2>
<p>类似的，我还为博客增加了 <a href="https://developer.twitter.com/en/docs/twitter-for-websites/cards/guides/getting-started">Twitter Cards</a>，同样也是修改文件头部 <code>&lt;meta&gt;</code> 标签中的内容，同样也是对主页和文章页分别设置：</p>
<pre><code class="language-html">&lt;!-- Twitter (index.ejs) --&gt;
&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;&gt;
&lt;meta name=&quot;twitter:title&quot; content=&quot;&lt;%= themeConfig.siteName %&gt;&quot;&gt;
&lt;meta name=&quot;twitter:description&quot; content=&quot;&lt;%= themeConfig.siteDescription %&gt;&quot;&gt;
&lt;meta name=&quot;twitter:site&quot; content=&quot;@WBoy0609&quot;&gt;
&lt;meta name=&quot;twitter:creator&quot; content=&quot;@WBoy0609&quot;&gt;
&lt;meta name=&quot;twitter:image&quot; content=&quot;&lt;%= themeConfig.domain %&gt;/images/avatar.png?v=&lt;%= site.utils.now %&gt;&quot;&gt;
</code></pre>
<pre><code class="language-html">&lt;!-- Twitter (post.ejs) --&gt;
&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;&gt;
&lt;meta name=&quot;twitter:title&quot; content=&quot;&lt;%= post.title %&gt;&quot;&gt;
&lt;meta name=&quot;twitter:description&quot; content=&quot;&lt;%= post.description %&gt;&quot;&gt;
&lt;meta name=&quot;twitter:site&quot; content=&quot;@WBoy0609&quot;&gt;
&lt;meta name=&quot;twitter:creator&quot; content=&quot;@WBoy0609&quot;&gt;
&lt;meta name=&quot;twitter:image&quot; content=&quot;&lt;%= post.feature %&gt;&quot;&gt;
</code></pre>
<p>原理类似，这里不重复了，最后的效果也挺不错的：</p>
<figure data-type="image" tabindex="6"><img src="https://leonwong0609.github.io/post-images/1610629039317.png" alt="" width="500" loading="lazy"></figure>
<h2 id="其他">其他</h2>
<p>除了这些在文档头部进行的、网页上无法直接体现的变化之外，我这次还微调了博客的一些排版问题，现在正文的对齐方式我改成了 <code>justify</code> 即两端对齐，这样看起来文章左右两侧都更加整齐，不会出现左侧对齐但右侧错落的难受情况。</p>
<p>总感觉上一篇博客没写完多久，结果没想到一不小心就过去了半年。之前一直想写的 My Little Airport 和一堆电影的影评到现在还拖着。还是希望以后有空闲的时候能多写写东西，毕竟消费信息快餐的记忆很快就会过去，最后什么都没留下；而写作的记忆，会和写下的文字共存。</p>
<h2 id="also-see">Also see…</h2>
<ul>
<li><a href="https://stackoverflow.com/questions/35268940/how-to-force-telegram-to-update-link-preview">How to force telegram to update link preview? -Stack Overflow</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[写在 20 岁生日的反思 🎂]]></title>
        <id>https://leonwong0609.github.io/post/20/</id>
        <link href="https://leonwong0609.github.io/post/20/">
        </link>
        <updated>2020-07-11T15:49:49.000Z</updated>
        <summary type="html"><![CDATA[<p>这篇文前后断断续续写了三次。本来打算在 9 号当天写完的，结果内容有点多，加上拖延症一犯就拖到了 29 号（正好五月初八）又写了一点，但当时正赶上期末，也没有多少能认真写东西的时间，现在是 11 号，刚刚考完试，终于有点空把这篇东西写完了。</p>
]]></summary>
        <content type="html"><![CDATA[<p>这篇文前后断断续续写了三次。本来打算在 9 号当天写完的，结果内容有点多，加上拖延症一犯就拖到了 29 号（正好五月初八）又写了一点，但当时正赶上期末，也没有多少能认真写东西的时间，现在是 11 号，刚刚考完试，终于有点空把这篇东西写完了。</p>
<!-- more -->
<p><ul class="markdownIt-TOC">
<li>
<ul>
<li><a href="#%E6%88%91%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E6%88%91">我是什么样的我？</a>
<ul>
<li><a href="#%E6%9B%BE%E7%BB%8F%E7%9A%84%E6%88%91">曾经的我</a></li>
<li><a href="#%E7%8E%B0%E5%9C%A8%E7%9A%84%E6%88%91">现在的我</a></li>
</ul>
</li>
<li><a href="#%E6%88%91%E5%B8%8C%E6%9C%9B%E6%88%90%E4%B8%BA%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E6%88%91">我希望成为什么样的我？</a></li>
<li><a href="#%E5%B0%BE%E5%A3%B0">尾声</a></li>
</ul>
</li>
</ul>
</p>
<blockquote>
<p>转眼间就迎来 20 岁的生日了，最近时间过得越来越快了，回想去年、前年生日似乎都还没有过多久。虽然这几年都不是什么人生高光时刻，但是这样一个整数的生日，似乎不写点什么太没有仪式感了。</p>
</blockquote>
<p>20 岁，一个曾经的我觉得完全遥不可及的年龄，已经悄悄来到身边了。我到现在还有点不敢相信自己已经是奔三的年纪，我曾经常和别人讲我对「八岁」的影响特别深刻，然而一转眼八岁那年也过了十二年了。</p>
<p>这 20 年，我在泰州出生，在老家待了几年后去过郑州，后来在广州生活了很长一段时间：从幼儿园一直到高中毕业；直到大学阶段开始，北京这个城市又进入了我的生活。</p>
<p>如果要我描述一下 20 岁的我的状态，我的答案可能和上了大学的这两年一样：<strong>迷茫</strong>。真的很迷茫，自从考上大学之后，痛苦和迷茫似乎成了我生活的底色。不知道是因为迷茫而痛苦还是因为痛苦而迷茫，或许这两者本身就是相互促成的吧。我不想这种状态继续，既然 20 岁是这样特殊的一个时间节点，不如就趁这个机会，好好反省一下自己的过去，思考一下自己的未来。</p>
<h2 id="我是什么样的我">我是什么样的我？</h2>
<p>这个问题我从很小就开始问自己。我曾经特别害怕自我介绍（当然我现在还是很怕，我也不知道我为什么要说「曾经」），因为我总觉得我不会用几个词几句话来形容概括自己。</p>
<h3 id="曾经的我">曾经的我</h3>
<p>年纪小的时候可能不会想那么多，幼儿园小学的时候总是和大家没心没肺地疯玩，或许是记忆不深刻了，但是那时候似乎很少有特别伤心难过的时候。真正对自己「不满意」可能是从六年级到刚上初中那段时间开始。当时就总想着为什么大家总不喜欢和我玩（哈哈好幼稚）？现在看来，当时我的脾气真的可以说是「古怪」。最近有次心血来潮翻了翻以前 QQ 空间的说说，当时就把我看傻了，不知道怎么形容我那种说话的语气，在现在的我看来，真的是感觉当时的那些句子都特别生硬，对他人的态度更是接近于无礼。看到偶尔发的一些聊天截图和评论区和好友的互动，我简直觉得我这种性格无比陌生。或许是当时觉得自己不够「酷」，想要通过一些特别的态度让周围的人留意我吧，很遗憾我选择了这种让人讨厌的态度，而且真的做过头了。那段时间的我确实很傻很傻，周围人不喜欢我，我也不喜欢我自己，也就没什么奇怪了。</p>
<p>事情到了高中开始就有了变化，我至今都还记得当初刚上高中的时候内心就十分珍惜这个「新起点」的机会，我迫切地想在高中做好以前没有做好的事，想要成为一个自己满意、他人也喜欢的人。我选择了可能是最简单的办法，那就是当「好人」。高中刚开始的那段时间我真的是十分投入地「为他人着想」，和人对话的时候也总想着别人想听到什么，看见他人遇到困难的时候总想着自己能不能帮忙，有事情要做的时候总想着要不要自己来做……这些举动听着仿佛很高尚，但实际上我这么做的原因不是因为我是个高尚的人，相反，我只是很功利地希望用这些举动换回一个「好人」的形象，让大家接受我、喜欢我罢了。</p>
<p>这个办法可能刚开始还是挺有效的，我起码不至于觉得自己不喜欢自己了。但是这种投机取巧的不良反应很快就显现了出来。首先我这些「为他人着想」「主动奉献」是有所求的，而这些举动往往又是投入回报比很低，这让我总觉得自己明明做了很多，但是周围的人却很少会愿意用我这样的程度对我。现在想想，这其实很好理解，因为大家并么有像我这样这么想获得些什么，而我又表演得像个「好人」，好人往往是发自内心的好，大家自然也不会觉得我这个「好人」其实是希求用自己的「好」来交换一些东西。然而当时的我并不懂这些，因此我常常觉得懊恼，觉得自己明明做了这么多，为什么大家还是不会像我想的那样欢迎我、对我好。现在想想，真的是幼稚到可笑。也正因此，我开始感到「迷失自我」了，大概就是从这个时候开始，我忘记了自己原来是个什么性格的人，因为我假装自己很好，一直选择迎合他人的喜好改变自己的行为方式，但我内心又深知自己并不是这样的人，所以在这种真真假假中，我把我原来的自己也丢失了。我也更加害怕自我介绍了。</p>
<p>转折点在某天听父亲说了一句话，大意就是不要总想着大家要帮你，不论是朋友还是陌生人，<strong>永远是「帮你是情分，不帮才是应该」</strong>。我记得当时我特别有感触，因为我发现我把太多事情想成理所应当的了，尤其是我觉得我对大家好，大家就应当也对我好。但事情并不是这样简单的，很多时候这种单纯的想法只是自己的一厢情愿罢了。我「帮助」别人当「好人」是我自己的选择，同样的，别人如果愿意因此接纳我、回报我也是他们自由的选择，而不是我想的那样像「平等交易」般理所当然的；就算他们不接纳、不回报也是完全正当合理，因为这种双方都完全自愿的情况下，所谓的「义务」就根本不存在。我也开始懂得，有时候可以随性一点，只要不为了邪念伤害他人，不破坏一些最基本的原则，其实就是正常的了，没有人规定自己的价值一定要从他人的认可中取得，不是大家都喜欢才是代表性格好，其实只要大多数人不讨厌就是正常了。我之前太在意别人的想法，总觉得只有大家都认可我我才能认可我自己，但我现在觉得，他人的认可其实没我以前想的那么重要，因此我也放下了功利主义的包袱，不再为了换回他人的一句肯定而做一件事情，而是因为自己内心觉得这是对的去做一件事情。这个转变真的让我和我身边的人都轻松了很多，应该也能算是高中的我很重要的一次成长了吧。</p>
<p>然而我并没有因为这一次的转变就记起我是个什么样的人，我依然还是害怕自我介绍（笑），但是我相信我这是向正确的方向迈进了一步吧。</p>
<h3 id="现在的我">现在的我</h3>
<p>可能就是因为这个转变，我不再重视大学这个「新起点」了，但是现在回想我的不重视有点过头了，简直能称得上疏忽。首先我填志愿的时候天真的以为第一志愿是稳定能进的，所以根本没有认真对待、甚至还把一个不怎么了解的新学校填了上去（是的就是我现在这个学校），志愿填报截止的当天六点躺在老家床上看《权力的游戏》，又很自信地没有做最后检查，于是我当然就得到了一个让我惊讶的录取结果。进入大学之后，我更是感觉自己没有「积极」地去面对新生活，也没有主动融入这个新环境，而是以一种慵懒的姿态，消极地任由时间流过，躺在命运的浪潮里，它把我冲到哪里我就继续在那躺着。我一边跟以前的朋友吐槽班上的人都没认齐，一边却从来不去主动参与社交；一边抱怨自己学校什么活动都没有，一边却不愿意参加少得可怜因而宝贵的学校活动；一边说自己的大学生活特别孤独平淡是个假的大学，一边却孤立自己、和身边所有人表现出一副社恐的样子，推开所有可能的朋友。总而言之，我对自己目前的状态并不满意，这种没有目标、没有动力、整天浑浑噩噩的日子真的会消磨人的意志力，如果我任由自己这样下去，我可能就离心目中那个讨厌的自己又不远了。</p>
<p>因此我觉得有必要思考一下自己的问题，虽然从正面概括自己很难，但是从反面挑出一两个自己不满的缺点还是相对容易的。我从几个星期前就开始想，想了很多很多零零散散的东西，大抵可以分为两方面。</p>
<p>首先我极度<strong>缺乏自控力</strong>。</p>
<p>我数不清多少个自己雄心勃勃的下午被 YouTube 的算法击垮了，我明知道自己有事情要做，有定好的计划不能拖延，然而对于眼前的消遣娱乐，我基本上是毫无抵抗能力。每每事后回想，我都不能理解我是如何背负着被死线压着的焦虑，欣赏一个个视频、一集集电视剧、一部部电影的。但是当时的我，就是愿意在眼前的满足和长久的益处中毫不犹豫地选择前者。</p>
<p>就因为这种怪异的坏习惯，所有的事前计划对我来说基本上都是无效的了，因为我计划做得再好，总会有一天不完成，而只要有了那一天未完成的积压，我完成计划的阻力就更大了，我也就更容易滑向低级的娱乐。</p>
<p>我曾经也不是没有过那种理想的高效率生活，但是仿佛在我的印象中这些日子都没有长久，我一时半会想不出原因，但至少我知道当下寻找一个能让自己保持清醒、做真正有利与自己的事情的办法是迫切的。</p>
<p>其次我<strong>十分浮躁</strong>。</p>
<p>这种浮躁体现在很多方面，上面说的总是沉迷于短平快的消遣就是其中一种。而对于学习，我更是完美印证「舌尖效应」。这个评价最早还是高中历史老师警示我时提出的，现在看来真的十分准确，我对所有的知识满足于入门的一知半解状态，仿佛我学习这些知识并不是为了真正掌握它，而是为了让我看起来好像掌握了它。因此我沉迷各种粗浅的「科普」内容，我可以花很多时间看一堆短文章、短视频，但是我可能不愿意花同样的时间看教材、啃论文。有时候我会给自己找理由说我可能是不喜欢所学的内容，但是对于自己真正感兴趣领域，我同样也是浅尝辄止，一旦开了点头了解了一些基础的东西，我就没什么动力继续深入了。短文短视频总能轻易给我营造出一种「我在学习」的假象，其实是把我困在了刚刚迈入的舒适圈里，而我正好讨厌满足于待在舒适圈里的自己。</p>
<p>我或许不能立马摆脱浮躁，但我相信意识到我是个浮躁的人、承认浮躁是自己的致命弱点，或许是做出改变的第一步。</p>
<h2 id="我希望成为什么样的我">我希望成为什么样的我？</h2>
<p>之前在网上看到很多关于「原子习惯」的内容，我的理解大概就是：我们的每个小习惯就像是构成我们的原子，换言之，我们的习惯会决定我们是什么样的人。对此我真是深感赞同，我不止一次制定计划、不止一次写下我对生活的期望、不止一次使用各种效率工具、应用，希望通过这些，我能成为理想中那种高效的人，过那种有意义的人生。然而事实情况是我不止一次被我自己讨厌的、固有的习惯打败。或许我能支撑一天两天，时间一长我就会又自动滑落回以前浑浑噩噩的生活习惯里。</p>
<p>我不想因此就失去期望，这个充满仪式感的日子里我还是希望自己能带者虔诚的态度再次展望一下未来，幻想一下我理想中的生活，仔细思考一下我到底想成为什么样的一个人。</p>
<p>首先我希望我能<strong>静下来</strong>。</p>
<p>这个期望似乎从中学开始，就有无数老师给我提过，然而当时的我根本不懂什么叫做安静什么叫做浮躁。在当时相对压抑、限制很多的环境里，安静或者浮躁几乎在严格的时间表下是看不出区别的，除非天天逃课不交作业，不然真的看不出安静的人和浮躁的人有什么区别。然而到了大学，尤其是这个大学以后，当我能自由支配我的时间了，我才看到了安静和浮躁之间从心态到行为的巨大差异。当我下课合上电脑装进书包就准备回宿舍，认为今天的学习时间已经结束时，有的同学留在课室，他们的学习时间才刚刚开始；当我考试前还在焦虑地看着课本，试图理解我上课就应该熟悉掌握地知识时，已经有同学在信心慢慢地准备下一科考试；当我终于考完试觉得可以好好放松一把时，有的同学已经启动自己的研究课题，或者开始交换、出国了。差距就在每天的不经意中越拉越远，就如同我上面说的，每一个细微习惯的差别，让我和其他优秀同学完全成了两种人。</p>
<p>因此我希望我能方下急功近利、临时抱佛脚的学习心态，回忆一下中学时期的学习状态，只不过这时候不是学校和老师压着自己，而是自己对自己的要求。不要在消费碎片信息中浪费更多的时间了。或许开始看看书，或许开始静下心来认真看一部电影，让自己能在更多的时间专注于有长远意义的事情，而不是被几分钟十几分钟的碎片内容一点点蚕食自己仅剩不多的可怜精力。</p>
<p>其次我希望我能<strong>积极</strong>。</p>
<p>前面说过，到了大学，我整个人都是懒散消极的。选课前夕还不知道自己能选课、该选什么课，奖学金申请材料快要截至提交了还不知道自己原来也符合申请条件，怎么计算学分、怎么申请项目、怎么出国交换一概不知，有时候我真的怀疑要是离开了我那两个认真的室友，我的大学生活还能不能好好进行。我印象中我曾经不是这样的人，我也不希望我成为这样的人。我猜想有一部分原因是我对大学阶段巨大的心理落差，但正如前面说的，这怪不了除了自己的任何人，既然已经结出苦果，那就请安静品尝，这不是选择安逸的理由。前些天和我弟一起看哈利波特，里面邓布利多有句台词我特别喜欢：<em>Happiness can be found, even in the darkest of times, if one only remembers to turn on the light.</em> 更何况我相信自己现在的状况远远还不算 <em>darkest of times</em>，我要做的就是点亮那盏灯，重新找回生活的热情，毕竟对于消极的人，生活每天撞向自己，而对于积极的人，自己每天都拥抱生活。</p>
<p>再者我希望我能<strong>多做</strong>。</p>
<p>有次晚上睡前聊天，我和室友倾诉我上了大学来的种种悲伤迷茫失望痛苦，室友苦笑，说他曾看过杨绛的一句话：「你的问题主要在于读书不多而想得太多。」我只觉醍醐灌顶。我花了太多的时间在无用的「想」上，我整夜整夜地想生活的不公，想过去的错误，想别人的说法，想自己的未来……然而大学阶段除了教科书我真的一本书都没读，一件大事也没干成，在思而不学中浪费了我两年的时间。我总是在抱怨生活不是我想象中的样子，我不该这样生活，然而我却从来没有为了改变现状真正做点什么，这必然不是一种健康的状态。我希望未来的我能做一个敢于行动的人，因为空想永远都是原地不动，只有迈开步子，才更有可能让自己向目标的方向前进。</p>
<p>说到这里，最后我希望自己能找到<strong>目标</strong>。</p>
<p>无论是什么成功学或者心灵鸡汤，都会强调目标的重要性，但我一直不以为意。因为他们说的目标总是和自己的心之所向联系在一起，什么找到热爱、找到乐趣……但我现在过的生活和我向往的完全不同，我从来没想过会真的一辈子读文科，也从来没想过这辈子专心做研究，也没想过以后做律师还是做什么。有段时间我甚至因为这个难受得睡不着觉（当然就是光难受，什么都不做的那种），然后想着什么下辈子有机会一定学计算机科学或者摄影设计之类的，因此我从来也没有认真地想过按照当下的现实，自己的目标或者说期盼的生活是什么样子的。现在坐在法学课堂上，每当听到老师说「你们以后都是以法律为业的」或者看到和法律有关的竞赛、培训的时候，我都感觉到内心一阵强烈慌乱，我内心仿佛有个声音在告诉我我永远都进不了法学这个圈子，因此只要一想到未来我可能注定就要在这个圈子里生长了，我就感到满满的慌张和不确定。但理智告诉我，一直这样想下去不是办法，现实已经如此，这场游戏里，我被发到的就是这样一手牌，我可以不打，直接离开游戏，但我目前没这个打算。既然要继续打下去，羡慕别人牌多好没有用处，也有其他比我牌更差的人，但这些我都改变不了，我能做的只是把我目前的这把牌认真地尽可能打好而已。这话说起来简单，但真正完全接受命运，不逃避直面惨烈的现实真的是一件很需要勇气的事情，而我恰好在这种事情上很缺少勇气，所以原谅我，我可能还要一点时间去适应，但是我也意识到了，这样一天天的，时间真的不多了。所以，还是希望自己能早点认清现实，放弃不切实际的空想，着手做必要的努力吧。</p>
<h2 id="尾声">尾声</h2>
<blockquote>
<p>孙子曰：昔之善战者，先为不可胜，以待敌之可胜。不可胜在己，可胜在敌。故善战者，能为不可胜，不能使敌之必可胜。故曰：胜可知，而不可为。不可胜者，守也；可胜者，攻也。——《孙子兵法 · 军形第四》</p>
</blockquote>
<p>我一直特别喜欢《孙子兵法》里面的这句话：「不可胜在己，可胜在敌。」不论世界如何变化，提高自己永远都是一件必须做的事情，而我却经常了解太多信息，真正提高自己的事情又做的太少，因此我一直希望用这句话警示自己：在埋怨世界时先看看有没有严格要求自己。20 岁了，18 岁高考前写的时间胶囊我根本不敢打开，因为我很清晰地记得，里面的每个充满好奇和憧憬的问题，目前的我都没有颜面去回答。认真度过的一年可以很长，希望明年这个时候的我，能相对从容地面对18 岁的我对自己的期盼吧。</p>
<p>20 岁了，我对自己的要求还是和以往一样：要永远天真，永远保持好奇，没人可以代替你过你的人生，胡思乱想的事情死后有的是时间，这辈子还请冷静而认真的生活吧。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[给博客增加 Telegram Instant View (即时预览)]]></title>
        <id>https://leonwong0609.github.io/post/add-instant-view-to-my-blog/</id>
        <link href="https://leonwong0609.github.io/post/add-instant-view-to-my-blog/">
        </link>
        <updated>2020-05-06T15:22:23.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://instantview.telegram.org/">Instant View</a> 是 Telegram 一个独特的链接预览功能，今天花了一点时间写了一下模板，给自己的博客也加上了 Instant View。这里记录一下过程。</p>
]]></summary>
        <content type="html"><![CDATA[<p><a href="https://instantview.telegram.org/">Instant View</a> 是 Telegram 一个独特的链接预览功能，今天花了一点时间写了一下模板，给自己的博客也加上了 Instant View。这里记录一下过程。</p>
<!-- more -->
<p>之前一直都以为 Instant View 是 Telegram 自动生成的，但是我关注到少数派的文章没有「生成」 Instant View，然后我自己博客的文章也从来没有显示过，于是我就上网查了一下，发现要想让网站适配 Instant View 是要写模板的。很早我就开始折腾了，但是一直没有成功，前段时间正好也比较忙，就把这件事也忘记了。今天白天看了一天的论文，晚上就想着折腾一下，正好就想到了这个。</p>
<p>我上网看了几篇其他人的博文，终于有了点头绪，下面介绍详细步骤。</p>
<h2 id="创建模板">创建模板</h2>
<p>首先登录<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> <a href="https://instantview.telegram.org/">Instant View 的官方项目页面</a>，初次登录需要点击右下角的 <code>Login</code> 通过自己的 Telegram 账号登录，验证成功后点击右侧边栏的 <code>My Templates</code> 进入自己的模板，然后将自己的博客地址粘贴到页面中的输入框，即可新建一个模板。</p>
<figure data-type="image" tabindex="1"><img src="https://leonwong0609.github.io/post-images/1588779434282.png" alt="成功创建模板" loading="lazy"></figure>
<p>如上，我们就成功创建了一个模板。</p>
<h2 id="修改模板">修改模板</h2>
<p>点击模板进入模板界面后，选取一篇文章的 URL 加入到模板中，确认后会进入到模板的编辑页面：</p>
<figure data-type="image" tabindex="2"><img src="https://leonwong0609.github.io/post-images/1588780034748.png" alt="模板编辑界面" loading="lazy"></figure>
<p>如图，我们可以看到左栏是原网页的预览，中间是模板的编辑区，右侧是 Instant View 生成效果的预览。具体的模板编写语法可以参考 <a href="https://instantview.telegram.org/docs">官方 Manual</a>，下面贴上我自己的：</p>
<pre><code class="language-python">#先是一些基本的信息
~version: &quot;2.1&quot; #声明版本号
site_name: &quot;Wonder Space 🚀&quot;
#网站的名字
author: &quot;Leon Wong&quot;
#作者名字，会显示在文章标题下
author_url:&quot;https://leonwong0609.github.io/post/about/&quot;
#点击作者名字后跳转的 URL，我这里定向到博客的关于页
channel: &quot;@leonwong0609&quot;
#相关的 Telegram Channel，可以显示在文章标题上，有个 Join 按钮

#然后是关于文章的
$main: //div[has-class(&quot;content-wrapper py-32 lg:p-8 lg:w-3/4 post-detail animated fadeIn __reader_view_article_wrap_22107290973894766__&quot;)]
# 这里的 $main 是一个 Variable，我的理解就是相当于用 $main 来代替后面的一长串
title: $main//h1
#我的博文中需要的标题就是 $main 中的 h1
body: //div[has-class(&quot;post-content yue&quot;)]
#我的博文正文内容就是一个 class 为 post-content yue 的 div
@remove: //ul[has-class(&quot;markdownIt-TOC&quot;)]
#不需要目录所以删除掉 class 为 markdownIt-TOC 的无序列表
@remove: //iframe
#Instant View 不支持 iframe，所以将其从模板中去掉

#最后是关于封面和略缩图
cover: //img[has-class(&quot;post-feature-image rounded-lg mx-auto my-4&quot;)]
#设置封面，会显示在 Instant View 页面顶部，我这里是特定 class 的 img 标签
image_url: //img[has-class(&quot;post-feature-image rounded-lg mx-auto my-4&quot;)]
#设置在对话气泡中的预览图，我这里设置的和封面相同
</code></pre>
<p>具体的网页情况可能和我这个会有不同，但是都大同小异，只要通过浏览器的检查工具找到对应内容的标签和 class 或者 id 就可以了，设置成功后，一般右侧栏就会自动出现效果的预览，我们还可以点击右上角的 <code>VIEW IN TELEGRAM</code> 将 IV 页面发送到 Telegram 中预览。预览无误后，可以点击右上角的 <code>MARK AS CHECKED</code>。</p>
<figure data-type="image" tabindex="3"><img src="https://leonwong0609.github.io/post-images/1588782033026.png" alt="IV 效果" loading="lazy"></figure>
<p>效果如上图，加载速度比起博客快了很多。</p>
<p>可以看出这个模板的设置和网页上的标签相关，所以看来以后不能那么勤快给博客换主题了。</p>
<p>到这一步基本上就完成了，但是我还没有弄清楚怎么样才能像 Telegra.ph 或者 Medium 那样直接输入链接就能出现 Instant View 选项。现在只有通过替换预览链接中的 URL 来实现 Instant View。例如我刚才生成的预览链接是：</p>
<pre><code class="language-text">https://t.me/iv?url=https%3A%2F%2Fleonwong0609.github.io%2Fpost%2Fhello-world%2F&amp;rhash=c8c9ddf4bad078
</code></pre>
<p>那么我就可以将 <code>url=</code> 后面和 <code>&amp;rhash</code> 前面的内容替换成我们自己的博文 URL (经过 URL encode 的) 就可以了。像我的博文 URL 都是只会改变 <code>post%2F</code> 后面的东西，所以相对比较方便更改。但是无论如何这种方法只能说是曲线救国，真的发送这样的在聊天框会显得太长，我们可以通过给文字增加超链接来改变这点。当然因为我身边完全没有人用 Telegram，我也完全不需要把 Instant View 链接发给谁，所以我就没有这个忧虑。</p>
<p>等等，既然这样我还折腾这个干嘛？</p>
<h2 id="参考内容">参考内容</h2>
<ul>
<li>壮壮博客：<a href="https://zhuangzhuang.cf/2019-04-23/instant-view/">Telegram 即时预览</a></li>
<li>方寸间：<a href="https://10101.io/2019/05/23/telegtam-instant-view">为网站添加 Telegram 即时预览</a></li>
<li>bovasjohn @ Medium: <a href="https://medium.com/@bovasjohn/what-is-instant-view-and-how-can-i-get-it-for-my-domain-in-telegram-messenger-6064efb1ed15">What Is Instant View And How can I get It for My domain? in Telegram Messenger</a></li>
</ul>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>需要使用电脑或者显示器分辨率较高的设备登录。 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Why do you love cinema?]]></title>
        <id>https://leonwong0609.github.io/post/why-do-you-love-cinema/</id>
        <link href="https://leonwong0609.github.io/post/why-do-you-love-cinema/">
        </link>
        <updated>2020-05-02T10:04:52.000Z</updated>
        <summary type="html"><![CDATA[<p>今天在推特上无意刷到了这个视频，看了之后感觉深受感染。这是个能让人产生共情的混剪，作者将各种语言的对热爱电影理由的阐释和经典电影的片段剪辑在一起，让我也不禁开始思考我为什么爱电影。</p>
]]></summary>
        <content type="html"><![CDATA[<p>今天在推特上无意刷到了这个视频，看了之后感觉深受感染。这是个能让人产生共情的混剪，作者将各种语言的对热爱电影理由的阐释和经典电影的片段剪辑在一起，让我也不禁开始思考我为什么爱电影。</p>
<!-- more -->
<iframe src="https://player.vimeo.com/video/413995579" width="640" height="360" frameborder="0" allow="autoplay; fullscreen" allowfullscreen></iframe>
<p color="gray"><a href="https://vimeo.com/413995579">Why do you love cinema?</a> from <a href="https://vimeo.com/ignaciomontalvo">Ignacio Montalvo</a> on <a href="https://vimeo.com">Vimeo</a>.</p>
<p>其实我「爱」电影「爱」得很非典型，我很清楚自己无比享受看电影时的那种快乐。小时候最喜欢的看电视方式不是看电视台，而是看有线电视提供的电影点播，当时只觉得电影时长不长不短，能全身心感受一个精彩的故事。电影结束后，我并没有更多地去了解电影背后的东西。就像听歌一样，我可能并不知道电影有哪些好导演，也没有什么特殊的电影品味，我就是单纯的只享受看电影的那段时间罢了。</p>
<p>电影之所以能带给我享受，我觉得重要的原因是电影能同时占据我的视觉和听觉。听歌或者听播客只能占据我的听觉，我眼睛可能会看其他东西，甚至歌曲和播客只是我做其他事情的背景音乐。看书、看漫画或者看相片也只能占据我的视觉，我可能在听歌，或者听到现实世界中的各种杂音。而电影就不同了，看电影时我的视觉听觉都被牢牢锁在其中，让我能最大程度地从现实世界中短暂地逃离。这个逃离的去处，是一个基于现实世界的故事世界，在这个世界里，现实世界中难以想象的疯狂梦想可以实现，现实世界中亟需的勇气可以在这里获得，现实世界中的痛苦可以在这里被抚慰：总之，我们可以暂时和让我们头痛的现实短暂分离。我们进入这个世界不需要再记得我们的身份、性格、性别、兴趣爱好等等一切给我们划分类别的属性，在这个世界里我们只需要忘记一切去听一个故事，去看这个世界中不一样的风景，去听这个世界中不一样的语言，去感受这个世界中角色的成长或者堕落……</p>
<p>除了逃避，电影对我而言更重要的是给我带来与众不同的体验。这种体验不仅是视觉、听觉上的，更是整个形态上、情感上的。我们有限的人生注定只能度过一次，但是透过电影，我们能看到各种各样的人的人生。在电影中跟着角色体验他们的生活，感受他们的情感，并从他们的人生中得到共鸣或者激励。在这个维度上，电影拓展了我的生活，让我能在更广阔的视野下体会这个世界。</p>
<p>最后，电影是低门槛的。不论你是发烧友还是路人，不论是成群结队还是形单影只，只要走进电影院或者打开屏幕和耳机，就可以轻松地跳入电影的世界。它可以是发烧友的精神享受，也可以是路人的平凡消遣，它可以是好友聚会快乐的催化剂，也可以是孤独时刻安全的灵魂港湾。绝大多数人都可以轻易欣赏，每个人都能从中得到不同的感悟。</p>
<p>然而我最近却越来越少看电影了。嘴上说着忙，但实际上很多时候连续看 YouTube 的时间加起来也能超过电影时长了。说到底，还是自己的心变浮躁了，觉得电影太长，不如数个十几分钟的短视频能简单刺激我的神经。所以万幸我看到了这个视频，我一下就又回忆起了电影的各种美好。我总是说着自己要慢慢平静下来，不如就从周末看部经典长片开始吧。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[中国 (PRC) 标准地图矢量素材]]></title>
        <id>https://leonwong0609.github.io/post/standard-map-of-china/</id>
        <link href="https://leonwong0609.github.io/post/standard-map-of-china/">
        </link>
        <updated>2020-04-09T05:02:52.000Z</updated>
        <summary type="html"><![CDATA[<p>网络上找到的中国地图素材的情况往往是国内的图虽然标准但普遍质量稍微差一点，国外的图虽有时候会好看些，但是往往缺少 <a href="https://zh.wikipedia.org/wiki/%E8%97%8F%E5%8D%97%E5%9C%B0%E5%8D%80">藏南</a>、<a href="https://zh.wikipedia.org/wiki/%E5%8D%97%E6%B5%B7%E7%88%AD%E8%AD%B0">南海</a>、<a href="https://zh.wikipedia.org/wiki/%E8%87%BA%E7%81%A3%E5%9C%B0%E5%8D%80">台湾</a> 这类地方，稍不注意容易引起严重的后果。</p>
]]></summary>
        <content type="html"><![CDATA[<p>网络上找到的中国地图素材的情况往往是国内的图虽然标准但普遍质量稍微差一点，国外的图虽有时候会好看些，但是往往缺少 <a href="https://zh.wikipedia.org/wiki/%E8%97%8F%E5%8D%97%E5%9C%B0%E5%8D%80">藏南</a>、<a href="https://zh.wikipedia.org/wiki/%E5%8D%97%E6%B5%B7%E7%88%AD%E8%AD%B0">南海</a>、<a href="https://zh.wikipedia.org/wiki/%E8%87%BA%E7%81%A3%E5%9C%B0%E5%8D%80">台湾</a> 这类地方，稍不注意容易引起严重的后果。</p>
<!-- more -->
<p>因此这里整理了一组网上找到的中国标准地图的素材，有矢量素材（.ai 格式的），也有 .psd 格式方便位图制作，也有现成的 .jpg、.png 格式供直接使用。</p>
<div style="width:100%;height:700px;overflow:hidden;border:0px">
<div style="width:100%;height:700px;margin:-50px 0px 0px 0px;">
<iframe src="https://www.jianguoyun.com/p/De5UyvwQmbCmCBi-lIwD#dir=%2F::mode=1" style="width: 100%;margin: 0;padding: 0;border: 0;height:700px;" scrolling="no">
</iframe>
</div>
</div>
<p>注意，这些素材来自于互联网，仅供学习交流，商用之前请确认版权情况。</p>
<p><strong>更多请阅：</strong></p>
<ul>
<li>维基百科条目：<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E9%A2%86%E5%9C%9F%E4%BA%89%E7%AB%AF">中国领土争端</a></li>
<li>姜大伟的知乎文章：<a href="https://zhuanlan.zhihu.com/p/25634886">使用中国地图的正确姿势</a></li>
<li>SuperMap地图的博文：<a href="https://blog.csdn.net/supermapping/article/details/49149271">制作中国范围地图的几点注意事项</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解决 Gridea 的 Walker 主题博文标题的问题以及预加速]]></title>
        <id>https://leonwong0609.github.io/post/walker-post-title/</id>
        <link href="https://leonwong0609.github.io/post/walker-post-title/">
        </link>
        <updated>2020-04-09T03:11:42.000Z</updated>
        <summary type="html"><![CDATA[<p>最近看 Pure 又看腻了，把 Gridea 上的主题全部试了一遍，就是没几个满意的，于是决定把之前最喜欢的 Walker 主题不显示博文标题的问题解决一下，结果又是一整天的折腾。</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近看 Pure 又看腻了，把 Gridea 上的主题全部试了一遍，就是没几个满意的，于是决定把之前最喜欢的 Walker 主题不显示博文标题的问题解决一下，结果又是一整天的折腾。</p>
<!-- more -->
<h2 id="通过修改-walker-主题文件解决-title-问题">通过修改 Walker 主题文件解决 <code>title</code> 问题</h2>
<p>解决过程实际上非常简单，只要在 Walker 主题的文件中找到 <code>\templates\post.ejs</code>，将 <code>&lt;head&gt;</code> 中 <code>siteTitle:</code> 的值改为 <code>${post.title} | ${themeConfig.siteName}</code>。</p>
<p>所以整个 <code>post.ejs</code> 的 <code>&lt;head&gt;</code> 标签应该是这样：</p>
<pre><code class="language-html">&lt;head&gt;
    &lt;%- include('./includes/head', { siteTitle: `${post.title} | ${themeConfig.siteName}` }) %&gt;
&lt;/head&gt;
</code></pre>
<p>然后保存，重启 Gridea，预览之后问题解决了。</p>
<figure data-type="image" tabindex="1"><img src="https://leonwong0609.github.io/post-images/1586403627477.png" alt="前后效果对比" width="600" loading="lazy"></figure>
<h2 id="通过-instantpage-预加速博客">通过 <a href="https://instant.page/">instant.page</a> 预加速博客</h2>
<p>后来想着反正都改了主题文件了，不如干脆把之前看到的 <a href="https://instant.page/">instant.page</a> 脚本也加上。和上面一样，Walker 主题中所有的脚本应该都是加在 <code>\templates\includes\scripts.ejs</code> 这个文件里，应该只要把以下的内容粘贴到文件尾就可以了。</p>
<pre><code class="language-html">&lt;script src=&quot;//instant.page/3.0.0&quot; type=&quot;module&quot; defer integrity=&quot;sha384-OeDn4XE77tdHo8pGtE1apMPmAipjoxUQ++eeJa6EtJCfHlvijigWiJpD7VDPWXV1&quot;&gt;&lt;/script&gt;
</code></pre>
<p>保存刷新预览后，没有什么很明显的感觉，毕竟这个加在哪里都是我猜的……但好在没发现什么问题，就当我是猜对了，然后这个脚本是玄学优化吧（笑）。</p>
<p>昨天又花了一整天折腾博客，感觉自己有点过分重视这些「皮囊」了。真正写字懒得写，主题美化什么的却很积极，不要忘记最早是为什么开始写博客的呀！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 CSS 将网页黑白化]]></title>
        <id>https://leonwong0609.github.io/post/css-gray-scale/</id>
        <link href="https://leonwong0609.github.io/post/css-gray-scale/">
        </link>
        <updated>2020-04-04T04:19:30.000Z</updated>
        <summary type="html"><![CDATA[<p>今天是清明节，降半旗哀悼疫情中的逝者，看到许多网页都变黑白了。我的小站就是直接在外部样式里写上自定义 CSS 就可以实现了，这里整理一些黑白化网页的 CSS 代码。</p>
]]></summary>
        <content type="html"><![CDATA[<p>今天是清明节，降半旗哀悼疫情中的逝者，看到许多网页都变黑白了。我的小站就是直接在外部样式里写上自定义 CSS 就可以实现了，这里整理一些黑白化网页的 CSS 代码。</p>
<!-- more -->
<p>首先可以直接写在 HTML 标签里：</p>
<pre><code class="language-html">&lt;html style=&quot;filter: progid:DXImageTransform.Microsoft.BasicImage(grayscale=1);-webkit-filter: grayscale(100%);&quot;&gt;
</code></pre>
<p>也可以在外部样式里写：</p>
<pre><code class="language-css">html{
    filter: progid:DXImageTransform.Microsoft.BasicImage(grayscale=1);
    -webkit-filter: grayscale(100%);
}
</code></pre>
<p>还有个在网上收集到的超全的：</p>
<pre><code class="language-css">html{
    -webkit-filter: grayscale(100%);
    -moz-filter: grayscale(100%);
    -ms-filter: grayscale(100%);
    -o-filter: grayscale(100%);
    filter: grayscale(100%);
    filter: url(&quot;data:image/svg+xml;utf8,&lt;svg xmlns=\'http://www.w3.org/2000/svg\'&gt;&lt;filter id=\'grayscale\'&gt;&lt;feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/&gt;&lt;/filter&gt;&lt;/svg&gt;#grayscale&quot;); 
    filter: progid:DXImageTransform.Microsoft.BasicImage(grayscale=1);
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[搭建个人的照片墙]]></title>
        <id>https://leonwong0609.github.io/post/photo-stream/</id>
        <link href="https://leonwong0609.github.io/post/photo-stream/">
        </link>
        <updated>2020-03-20T06:14:30.000Z</updated>
        <summary type="html"><![CDATA[<p>今天下午心血来潮搭建了一个<a href="https://leonwong0609.netlify.com/">照片墙</a>。</p>
]]></summary>
        <content type="html"><![CDATA[<p>今天下午心血来潮搭建了一个<a href="https://leonwong0609.netlify.com/">照片墙</a>。</p>
<!-- more -->
<h2 id="部署">部署</h2>
<p>主要是看见了 GitHub 上一个叫 <a href="https://github.com/maxvoltar/photo-stream#how-to-install">photo-stream</a> 的项目，实现效果真的特别心水。尝试后，部署的操作也很简单，只要把整个项目 fork 到自己 GitHub，然后用 Netlify 部署就可以了。所有的步骤在项目的 README 中介绍得十分详细，这里就不赘述了。</p>
<p>Netlify 免费服务不能自定义域名，访问流量好像也有一定的限制，但是对我来说都无所谓了，毕竟也没有人会看我的博客和照片墙（笑）。</p>
<p>下一步就可以上传一些自己的照片了，又是一个逼迫自己学习 git 的好机会。我想着也可以把照片墙的入口加到博客的主页菜单里。</p>
<p>对了还可以通过下面这个徽章查看部署的状态。</p>
<figure data-type="image" tabindex="1"><a href="https://app.netlify.com/sites/leonwong0609/deploys"><img src="https://api.netlify.com/api/v1/badges/0469689f-4d53-4c1b-beaa-29ee5b7b3797/deploy-status" alt="Netlify Status" loading="lazy"></a></figure>
<h2 id="个性化">个性化</h2>
<p>项目的 README <a href="https://github.com/maxvoltar/photo-stream#customize">详细介绍了个性化</a>的内容和操作，摘录如下：</p>
<h3 id="basics">Basics</h3>
<p>First thing you want to do is edit a couple of things in <code>/_config.yml</code>:</p>
<ul>
<li>
<p><code>title</code>: The title of your photo stream</p>
</li>
<li>
<p><code>email</code>: Your email address (this line is optional, you can remove it)</p>
</li>
<li>
<p><code>author</code></p>
</li>
<li>
<p><code>name</code>: Your name</p>
<ul>
<li><code>email</code>: Your email address (optional)</li>
<li><code>website</code>: Your website (could be the address of this photo stream)</li>
</ul>
</li>
<li>
<p><code>description</code>: Description of your photo stream</p>
</li>
<li>
<p><code>baseurl</code>: Should be <code>&quot;&quot;</code> <strong>⚠️ Do not change unless you know what you're doing</strong></p>
</li>
<li>
<p><code>url</code>: Where will this photo stream live (example: <code>https://maxvoltar.photo</code>)</p>
</li>
<li>
<p><code>twitter_username</code>: Your Twitter username</p>
</li>
<li>
<p><code>github_username</code>: Your Github username</p>
</li>
<li>
<p><code>instagram_username</code>: Your Instagram username</p>
</li>
</ul>
<p>Don't include the <code>@</code>-part of your social handles. By default links to your Github and Instagram profiles are hidden. You can uncomment these by going into <code>/index.html</code>. There, you can also add links to wherever you want. Just add more <code>'s with `class=&quot;link&quot;` to the</code> list.</p>
<h3 id="advanced">Advanced</h3>
<p>Before publishing your website, Jekyll will resize your photos into 3 different buckets:</p>
<ul>
<li><code>/photos/large</code>: These are only shown when a user navigates to a photo page. By default these are resized to a maximum of 2048 wide and 2048 tall. If you wish, you can change these by changing the values in <code>/_config.yml</code> (by default they look something like this: <code>resize_to_limit: [2048, 2048]</code>).</li>
<li><code>/photos/thumbnail</code>: These are used in the grid. Photo Stream will load all thumbnails above the fold, then more as you scroll down; all to save bandwidth. Standard size for these is 640 by 640 (max), but you can also change this if needed.</li>
<li><code>/photos/tint</code>: What you see while the page loads its first batch of thumbnails, also used as the background for photo pages. <strong>⚠️ Do not make changes to the tint versions in your config file.</strong></li>
</ul>
<h2 id="上传和使用">上传和使用</h2>
<p>其实在修改上面的个性化设置的时候只用修改 index.html 和一个配置文件，用 GitHub 网站上的文本编辑器足够了，但是如果要上传照片或者删除照片，除了一个个删除，就逃不掉 git 了。于是在网上找了很多关于 git 的教程。从下午两点折腾到下午四点，终于算是弄得一知半解，能把照片上传到自己的仓库了。</p>
<p>嗯为了方便以后忘记了操作需要复习，这里总结一下。总的来说就是记住这几样东西。</p>
<p>首先我是直接使用 Powershell 的，先 <code>cd</code> 到电脑仓库的目录，远程和本地都已经连接好了。正常情况只会用到几个命令：</p>
<ul>
<li><code>git status</code> 查看一下目前的状态，习惯性用一下</li>
<li><code>git add .</code> 用来将做好的变动添加到本地记录，也就是说要不要 git 来监视这个文件的变化</li>
<li><code>git commit -m &quot;message&quot;</code> commit 不用解释了</li>
<li><code>git push</code> 推到远端，只有 origin master，也都设置好了</li>
<li><code>git pull</code> 从远端拉取，我这里基本是用不上的了</li>
</ul>
<p>这里是一个比较好的教程视频：</p>
<div style="width:100%;height:500px;overflow:hidden;border:0px">
<div style="width:100%;height:500px;margin:-50px 0px 0px 0px;">
<iframe src="https://www.youtube.com/embed/OVLR9qRc9ak" style="width: 100%;margin: 0;padding: 0;border: 0;height:500px;" scrolling="yes">
</iframe>
</div>
</div>
<p>其实把预设照片删掉后，上传图片直接用 GitHub 的网页端也可以实现了。现在 GitHub 移动端应用也出了，回头尝试一下用移动端的应用程序能不能上传，如果可以，那就能在电脑上用到 pull 指令了。</p>
<p>这样看来，Gridea 这样的傻瓜式软件省掉了我多少的麻烦，越来越对 Gridea 的开发者感到敬佩了。</p>
<h2 id="summary">Summary</h2>
<p>总之又是折腾了一下午，但是获益匪浅，都怪 Gridea 这种方便的轮子让我懒得学习命令行 XD。好了一下午又没了，该去写英语作业了。</p>
]]></content>
    </entry>
</feed>